% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ffi.R
\name{ffi_to_tibble}
\alias{ffi_to_tibble}
\alias{ffi_tables_process}
\title{Raw FFI data to tibble}
\usage{
ffi_to_tibble(
  departments,
  years,
  filter_list,
  folder,
  ...,
  .parallel_options = furrr::furrr_options(scheduling = 1L, stdout = TRUE),
  .verbose = TRUE
)

ffi_tables_process(
  departments,
  year,
  filter_list,
  folder,
  .parallel_options,
  .verbose,
  ...
)
}
\arguments{
\item{departments}{A character vector with the code for the departments.}

\item{years}{A numeric vector with the years to extract de data from.}

\item{filter_list}{A list of counties and plots to extract the data from. If \code{NULL} all
plots for the department for all years will be extracted, which can use a big amount of memory. See
details.}

\item{folder}{The path to the folder containing the FFI csv files, as character.}

\item{...}{Not used at the moment}

\item{.parallel_options}{An object of class \code{furrr_options}. See
\code{\link[furrr]{furrr_options}}.}

\item{.verbose}{Logical controlling if progress messages are shown.}
}
\value{
A nested tibble. This tibble contains a row per plot/year combination, with the plot
metadata included, as well as columns containing tibbles with tree, shrub, herbs and soil
information. See \code{vignette("inventory_data_tibble", pkg = "esus")}
}
\description{
Transform raw FFI plot data into tidy data for use in models

Processing all tables for one year
}
\details{
This function will take every year indicated and retrieve and transform the plot data for the departments and
plots provided. For that, csv files from FFI must reside in the folder indicated in the
\code{folder} argument.

This function is intended to be called internally by \code{\link{ffi_to_tibble}} for each
year. This is implemented with furrr to allow parallelization of the plots data retrieval.
}
\section{Functions}{
\itemize{
\item \code{ffi_tables_process()}: Process one year

}}
\section{Filter list}{

If no \code{filter_list} argument is provided, \code{ffi_to_tibble} will attempt to process all
plots for the departments and years provided. This will result in sometimes hundred of thousands
plots to be extracted, processed and returned, will in turn will cause a big use of memory and
long times of calculation (specially when parallelising). Is better to provide a list of departments
with the counties and plots to look after to narrow the process. This \code{filter_list} should
have the following structure:
\preformatted{
   list(
   "01" = 1404119,
   "10" = 900863,
   "11" = c(1436508, 1410492))

  )
  }
\code{esus} package offers workflows to create this automatically, see
\code{vignette("filtering_plots", pkg = "esus")} for more details.
}

\section{Parallel}{

Processing the plots from within a year can be done in parallel (\code{esus} uses internally the
\code{\link[furrr]{furrr}} package for this). This means that, if parallelization is active,
several processes are launched to retrieve the plots data for that year. This is repeated for
all years provided.

\code{.parallel_options} controls the finer details of how parallelization is performed (see
\code{\link[furrr]{furrr_options}}). But no parallelization can occur without setting first
a \code{\link[future]{plan}}. By default, the chosen plan is \code{\link[future]{sequential}},
so no parellization is done. Changing the plan, i.e. to \code{\link[future]{multisession}} or
to \code{\link[future.callr]{callr}}, will allow \code{ffi_to_tibble} to use parallelization
when retrieving the data.
}

